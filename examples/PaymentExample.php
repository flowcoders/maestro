<?php

/**
 * Exemplo de Uso Completo - Maestro Payment Package
 * 
 * Este exemplo demonstra a nova arquitetura:
 * 1. Usuario monta DTOs (interface externa, sem valida√ß√£o)
 * 2. Factory converte DTO ‚Üí VO (com valida√ß√£o)
 * 3. Adapter/Mapper usa VOs (processamento interno)
 * 4. Retorna DTOs (interface externa)
 */

require_once __DIR__ . '/../vendor/autoload.php';

use Flowcoders\Maestro\DTOs\CustomerDTO;
use Flowcoders\Maestro\DTOs\PaymentDTO;
use Flowcoders\Maestro\DTOs\PaymentMethods\PixDTO;
use Flowcoders\Maestro\DTOs\PaymentMethods\CreditCardDTO;
use Flowcoders\Maestro\Enums\Currency;
use Flowcoders\Maestro\Enums\DocumentType;
use Flowcoders\Maestro\Factories\PaymentFactory;
use Flowcoders\Maestro\Adapters\MercadoPagoAdapter;
use Flowcoders\Maestro\Enums\CardBrand;
use Flowcoders\Maestro\Mappers\MercadoPagoPaymentMapper;

echo "=== MAESTRO PAYMENT PACKAGE - EXEMPLO DE USO ===\n\n";

// ================================================================
// EXEMPLO 1: PAGAMENTO PIX
// ================================================================

echo "üì± EXEMPLO 1: Pagamento PIX\n";
echo "=".str_repeat("=", 50)."\n\n";

// 1. USUARIO monta DTOs (interface externa - sem valida√ß√£o)
echo "1Ô∏è‚É£ Usuario monta DTOs (interface externa):\n";

$customer = CustomerDTO::create(
    email: 'joao.silva@email.com',
    firstName: 'Jo√£o',
    lastName: 'Silva',
    document: '12345678901', // CPF como string
    documentType: DocumentType::CPF,
    phone: '11999999999'
);

$pixMethod = PixDTO::create(expiresAt: 60); // PIX expira em 60 minutos

$pixPayment = PaymentDTO::create(
    amount: 10000, // R$ 100,00 em centavos
    currency: Currency::BRL,
    description: 'Compra de produto XYZ',
    paymentMethod: $pixMethod,
    customer: $customer,
    externalReference: 'ORDER-123456',
    notificationUrl: 'https://meusite.com/webhook'
);

echo "‚úÖ CustomerDTO criado: {$customer->firstName} {$customer->lastName}\n";
echo "‚úÖ PixDTO criado: expira em {$pixMethod->expiresAt} minutos\n";
echo "‚úÖ PaymentDTO criado: R$ " . number_format($pixPayment->amount / 100, 2, ',', '.') . "\n\n";

// 2. FACTORY converte DTO ‚Üí VO (com valida√ß√£o)
echo "2Ô∏è‚É£ Factory converte DTO ‚Üí VO (com valida√ß√£o):\n";

try {
    $validatedPayment = PaymentFactory::fromDTO($pixPayment);
    echo "‚úÖ Payment VO criado e validado!\n";
    echo "   - Customer com documento v√°lido: " . ($validatedPayment->customer->hasValidDocument() ? 'SIM' : 'N√ÉO') . "\n";
    echo "   - PaymentMethod tipo: {$validatedPayment->paymentMethod->getType()}\n";
    echo "   - Requer customer: " . ($validatedPayment->requiresCustomer() ? 'SIM' : 'N√ÉO') . "\n\n";
} catch (\InvalidArgumentException $e) {
    echo "‚ùå Erro de valida√ß√£o: {$e->getMessage()}\n\n";
    exit(1);
}

// 3. ADAPTER/MAPPER usa VOs (processamento interno)
echo "3Ô∏è‚É£ Adapter/Mapper usa VOs (processamento interno):\n";

$mapper = new MercadoPagoPaymentMapper();
$pspPayload = $mapper->mapCreatePaymentRequest($validatedPayment);

echo "‚úÖ Payload do MercadoPago gerado:\n";
echo json_encode($pspPayload, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "\n\n";

// ================================================================
// EXEMPLO 2: PAGAMENTO CART√ÉO DE CR√âDITO
// ================================================================

echo "üí≥ EXEMPLO 2: Pagamento Cart√£o de Cr√©dito\n";
echo "=".str_repeat("=", 50)."\n\n";

// 1. USUARIO monta DTOs (interface externa)
echo "1Ô∏è‚É£ Usuario monta DTOs (interface externa):\n";

$customerCard = CustomerDTO::create(
    email: 'maria.santos@email.com',
    firstName: 'Maria',
    lastName: 'Santos',
    // Sem documento para cart√£o (opcional)
    phone: '11888888888'
);

$cardBrand = CardBrand::VISA;

$creditCard = CreditCardDTO::create(
    token: 'card_token_abc123',
    holderName: 'MARIA SANTOS',
    expirationMonth: 12,
    expirationYear: 2025,
    brand: $cardBrand,
    lastFourDigits: '1234'
);

$cardPayment = PaymentDTO::create(
    amount: 50000, // R$ 500,00 em centavos
    currency: Currency::BRL,
    description: 'Assinatura Premium - 12 meses',
    paymentMethod: $creditCard, // Mesmo interface, diferente implementa√ß√£o!
    installments: 3, // 3 parcelas
    customer: $customerCard,
    externalReference: 'SUBSCRIPTION-789'
);

echo "‚úÖ CustomerDTO criado: {$customerCard->firstName} {$customerCard->lastName}\n";
echo "‚úÖ CreditCardDTO criado: {$creditCard->brand} ****{$creditCard->lastFourDigits}\n";
echo "‚úÖ PaymentDTO criado: {$cardPayment->installments}x de R$ " . 
     number_format(($cardPayment->amount / $cardPayment->installments) / 100, 2, ',', '.') . "\n\n";

// 2. FACTORY converte DTO ‚Üí VO (com valida√ß√£o)
echo "2Ô∏è‚É£ Factory converte DTO ‚Üí VO (com valida√ß√£o):\n";

try {
    $validatedCardPayment = PaymentFactory::fromDTO($cardPayment);
    echo "‚úÖ Payment VO criado e validado!\n";
    echo "   - Customer sem documento: " . ($validatedCardPayment->customer->hasValidDocument() ? 'SIM' : 'N√ÉO') . "\n";
    echo "   - PaymentMethod tipo: {$validatedCardPayment->paymentMethod->getType()}\n";
    echo "   - Parcelas: {$validatedCardPayment->installments}x\n\n";
} catch (\InvalidArgumentException $e) {
    echo "‚ùå Erro de valida√ß√£o: {$e->getMessage()}\n\n";
    exit(1);
}

// 3. ADAPTER/MAPPER usa VOs (processamento interno)
echo "3Ô∏è‚É£ Adapter/Mapper usa VOs (processamento interno):\n";

$cardPspPayload = $mapper->mapCreatePaymentRequest($validatedCardPayment);

echo "‚úÖ Payload do MercadoPago gerado:\n";
echo json_encode($cardPspPayload, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "\n\n";

// ================================================================
// EXEMPLO 3: DEMONSTRA√á√ÉO DE VALIDA√á√ïES
// ================================================================

echo "üõ°Ô∏è EXEMPLO 3: Demonstra√ß√£o de Valida√ß√µes\n";
echo "=".str_repeat("=", 50)."\n\n";

echo "1Ô∏è‚É£ Testando PIX sem customer (deve falhar):\n";

$pixWithoutCustomer = PaymentDTO::create(
    amount: 1000,
    currency: Currency::BRL,
    description: 'Teste sem customer',
    paymentMethod: PixDTO::create(expiresAt: 30)
    // customer: null - PIX requer customer!
);

try {
    PaymentFactory::fromDTO($pixWithoutCustomer);
    echo "‚ùå ERRO: Deveria ter falhado!\n";
} catch (\InvalidArgumentException $e) {
    echo "‚úÖ Valida√ß√£o funcionando: {$e->getMessage()}\n\n";
}

echo "2Ô∏è‚É£ Testando valor inv√°lido (deve falhar):\n";

$invalidAmount = PaymentDTO::create(
    amount: 0, // Valor inv√°lido!
    currency: Currency::BRL,
    description: 'Teste valor zero',
    paymentMethod: PixDTO::create(expiresAt: 30),
    customer: $customer
);

try {
    PaymentFactory::fromDTO($invalidAmount);
    echo "‚ùå ERRO: Deveria ter falhado!\n";
} catch (\InvalidArgumentException $e) {
    echo "‚úÖ Valida√ß√£o funcionando: {$e->getMessage()}\n\n";
}

echo "3Ô∏è‚É£ Testando customer sem dados m√≠nimos (deve falhar):\n";

$invalidCustomer = CustomerDTO::create(); // Sem email, nome, nada!

$invalidPayment = PaymentDTO::create(
    amount: 1000,
    currency: Currency::BRL,
    description: 'Teste customer inv√°lido',
    paymentMethod: PixDTO::create(expiresAt: 30),
    customer: $invalidCustomer
);

try {
    PaymentFactory::fromDTO($invalidPayment);
    echo "‚ùå ERRO: Deveria ter falhado!\n";
} catch (\InvalidArgumentException $e) {
    echo "‚úÖ Valida√ß√£o funcionando: {$e->getMessage()}\n\n";
}

// ================================================================
// EXEMPLO 4: FLUXO COMPLETO COM ADAPTER (SIMULADO)
// ================================================================

echo "üöÄ EXEMPLO 4: Fluxo Completo com Adapter (Simulado)\n";
echo "=".str_repeat("=", 50)."\n\n";

echo "1Ô∏è‚É£ Preparando pagamento PIX completo:\n";

// Usuario monta dados
$finalCustomer = CustomerDTO::create(
    email: 'teste@example.com',
    firstName: 'Cliente',
    lastName: 'Teste',
    document: '11122233344',
    documentType: DocumentType::CPF,
    phone: '11999888777'
);

$finalPix = PixDTO::create(expiresAt: 120);

$finalPayment = PaymentDTO::create(
    amount: 25000, // R$ 250,00
    currency: Currency::BRL,
    description: 'Pagamento de teste - Produto ABC',
    paymentMethod: $finalPix,
    customer: $finalCustomer,
    externalReference: 'TEST-'.uniqid(),
    notificationUrl: 'https://webhook.example.com/payment'
);

echo "‚úÖ DTOs criados pelo usuario\n";

// Factory valida
$validatedFinalPayment = PaymentFactory::fromDTO($finalPayment);
echo "‚úÖ Payment VO validado pela factory\n";

// Mapper gera payload
$finalPayload = $mapper->mapCreatePaymentRequest($validatedFinalPayment);
echo "‚úÖ Payload do PSP gerado pelo mapper\n";

// Simula√ß√£o de resposta do PSP
$simulatedResponse = [
    'id' => 'MP-' . uniqid(),
    'status' => 'pending',
    'transaction_amount' => 250.00,
    'currency_id' => 'BRL',
    'description' => 'Pagamento de teste - Produto ABC',
    'external_reference' => $finalPayment->externalReference,
    'payment_method_id' => 'pix',
    'date_created' => (new DateTime())->format('c'),
    'date_last_updated' => (new DateTime())->format('c'),
];

// Mapper converte resposta
$responseDTO = $mapper->mapPaymentResponse($simulatedResponse);
echo "‚úÖ PaymentResponseDTO criado a partir da resposta do PSP\n\n";

echo "üìä RESULTADO FINAL:\n";
echo "   - Payment ID: {$responseDTO->id}\n";
echo "   - Status: {$responseDTO->status->value}\n";
echo "   - Valor: R$ " . number_format($responseDTO->amount / 100, 2, ',', '.') . "\n";
echo "   - M√©todo: {$responseDTO->paymentMethod}\n";
echo "   - Refer√™ncia: {$responseDTO->externalReference}\n\n";

// ================================================================
// RESUMO DA ARQUITETURA
// ================================================================

echo "üìã RESUMO DA NOVA ARQUITETURA\n";
echo "=".str_repeat("=", 50)."\n\n";

echo "1Ô∏è‚É£ USUARIO trabalha com DTOs:\n";
echo "   ‚úÖ Interface simples e limpa\n";
echo "   ‚úÖ Sem valida√ß√£o (tipos primitivos)\n";
echo "   ‚úÖ F√°cil de serializar/deserializar\n";
echo "   ‚úÖ CustomerDTO, PaymentDTO, PixDTO, CreditCardDTO\n\n";

echo "2Ô∏è‚É£ FACTORY converte DTO ‚Üí VO:\n";
echo "   ‚úÖ PaymentFactory::fromDTO()\n";
echo "   ‚úÖ CustomerFactory::fromDTO()\n";
echo "   ‚úÖ Valida√ß√£o autom√°tica na convers√£o\n";
echo "   ‚úÖ Erros claros se dados inv√°lidos\n\n";

echo "3Ô∏è‚É£ VALUEOBJECTS com valida√ß√£o:\n";
echo "   ‚úÖ Payment VO, Customer VO\n";
echo "   ‚úÖ Email VO, PhoneNumber VO, Cpf VO\n";
echo "   ‚úÖ Regras de neg√≥cio internas\n";
echo "   ‚úÖ Dados sempre v√°lidos\n\n";

echo "4Ô∏è‚É£ MAPPERS usam VOs validados:\n";
echo "   ‚úÖ Sem necessidade de valida√ß√£o adicional\n";
echo "   ‚úÖ Foco na transforma√ß√£o de dados\n";
echo "   ‚úÖ Polimorfismo entre PaymentMethods\n";
echo "   ‚úÖ C√≥digo mais limpo\n\n";

echo "5Ô∏è‚É£ INTERFACE POLIM√ìRFICA:\n";
echo "   ‚úÖ PaymentMethodInterface permite PIX/Card\n";
echo "   ‚úÖ Mesmo c√≥digo para diferentes m√©todos\n";
echo "   ‚úÖ Extens√≠vel para novos PSPs\n";
echo "   ‚úÖ Type-safe com PHP 8+\n\n";

echo "üéâ EXEMPLO CONCLU√çDO COM SUCESSO!\n";
echo "A nova arquitetura est√° funcionando perfeitamente!\n\n";
